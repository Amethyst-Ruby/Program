Description
FatMouse prepared M pounds of cat food, ready to trade with the cats guarding the warehouse containing his favorite food, JavaBean. The warehouse has N rooms. The i-th room contains J[i] pounds of JavaBeans and requires F[i] pounds of cat food. FatMouse does not have to trade for all the JavaBeans in the room, instead, he may get J[i]* a% pounds of JavaBeans if he pays F[i]* a% pounds of cat food. Here a is a real number. Now he is assigning this homework to you: tell him the maximum amount of JavaBeans he can obtain.

Input
The input consists of multiple test cases. Each test case begins with a line containing two non-negative integers M and N. Then N lines follow, each contains two non-negative integers J[i] and F[i] respectively. The last test case is followed by two -1's. All integers are not greater than 1000.

Output
For each test case, print in a single line a real number accurate up to 3 decimal places, which is the maximum amount of JavaBeans that FatMouse can obtain.

Sample Input
5 3
7 2
4 3
5 2
20 3
25 18
24 15
15 10
-1 -1

Sample Output
13.333
31.500





#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
struct Mouse 
{
	double J,F,a;
};
bool comp(const Mouse &d1,const Mouse &d2)
{
	if(d1.a!=d2.a)return d1.a>d2.a;
	else return d1.F<d2.F;
} 
int main()
{
	vector<Mouse> v;
	Mouse mouse;
	int m,n,i;
	cout.precision(3);//·½±ã~
	double sum;
	while(cin>>m>>n)
	{
		if(m==-1&&n==-1) break;
		v.clear();
		sum=0.0;
		for(i=0;i<n;i++)
		{
			cin>>mouse.J>>mouse.F;
			mouse.a=mouse.J/mouse.F;
			v.push_back(mouse);
			
		}
		sort(v.begin(),v.end(),comp);
		for(i=0;i<v.size();i++)
		{
			if(m>=v[i].F)
			    {
    				sum=sum+v[i].J;
    				m=m-v[i].F;
    			}
			else 
			    {
    				sum=sum+m*v[i].a;
    				break;
    			}
		}
		cout<<fixed<<sum<<endl;
	}
}
