Description
One measure of ``unsortedness'' in a sequence is the number of pairs of entries that are out of order with respect to each other. For instance, in the letter sequence ``DAABEC'', this measure is 5, since D is greater than four letters to its right and E is greater than one letter to its right. This measure is called the number of inversions in the sequence. The sequence ``AACEDGG'' has only one inversion (E and D)---it is nearly sorted---while the sequence ``ZWQM'' has 6 inversions (it is as unsorted as can be---exactly the reverse of sorted).
You are responsible for cataloguing a sequence of DNA strings (sequences containing only the four letters A, C, G, and T). However, you want to catalog them, not in alphabetical order, but rather in order of ``sortedness'', from ``most sorted'' to ``least sorted''. All the strings are of the same length.

Input
The first line contains two integers: a positive integer n (0 < n <= 50) giving the length of the strings; and a positive integer m (0 < m <= 100) giving the number of strings. These are followed by m lines, each containing a string of length n.

Output
Output the list of input strings, arranged from ``most sorted'' to ``least sorted''. Since two strings can be equally sorted, then output them according to the orginal order.

Sample Input
10 6
AACATGAAGG
TTTTGGCCAA
TTTGGCCAAA
GATCAGATTT
CCCGGGGGGA
ATCGATGCAT

Sample Output
CCCGGGGGGA
AACATGAAGG
GATCAGATTT
ATCGATGCAT
TTTTGGCCAA
TTTGGCCAAA





#include<iostream>
#include<cmath>
#include<string>
#include<vector>
#include<algorithm>
#include<iomanip>
//#include<fstream>
using namespace std;
bool comp(const string &s1,const string &s2)          //这要加上const
{
	int i,j,k,m,n;
	int c1=0,c2=0;
	for(i=0;i<s1.size();i++)
	   for(j=i+1;j<s1.size();j++)
	      {
     		if(s1[i]>s1[j]) c1++;
     	  }
    for(i=0;i<s2.size();i++)
       for(j=i+1;j<s2.size();j++)
	      {
     		if(s2[i]>s2[j]) c2++;
     	  }
    return c1!=c2?c1<c2:c1<c2;
}
int main()
{   //ifstream cin("aaa.txt");
    string s; 
    vector<string>v;
    int a,b;
    int i,j,k;
        cin.clear();
    	cin>>a>>b;
    	v.clear();
     	for(j=0;j<b;j++)
    	  {
	    	cin>>s;
	    	v.push_back(s);
    	  }
	    sort(v.begin(),v.end(),comp);       //排序，用comp规则	
        for(k=0;k<v.size();k++)
	       cout<<v[k]<<endl;
}
